{"version":3,"sources":["components/AddCategory.js","components/GifItem.js","components/helpers/GetGifs.js","components/GifGrid.js","components/hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","catgs","type","placeholder","value","onChange","target","GifItem","id","title","imageUrl","className","src","alt","GetGifs","category","a","url","fetch","resp","json","data","imagesGif","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OACI,sBAAMC,SAXU,SAACC,GACjBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAQ,IACzBR,GAAc,SAAAS,GAAK,OAAGP,GAAH,mBAAkBO,OACrCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,YAAY,SACZC,MAAOV,EACPW,SApBa,SAACR,GACtBF,EAAcE,EAAES,OAAOF,a,QCNlBG,EAAU,SAAC,GAAwB,EAAvBC,GAAwB,IAArBC,EAAoB,EAApBA,MAAMC,EAAc,EAAdA,SAC9B,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAUG,IAAKJ,IACzB,4BAAIA,Q,uBCLHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEkCF,EAFlC,+DAGDG,MAAMD,GAHL,cAGbE,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAWD,EAAKE,KAAI,SAAAC,GACtB,MAAM,CACFhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,SAAUc,EAAIC,OAAOC,iBAAiBT,QAV3B,kBAeZK,GAfY,4CAAH,sDCGPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECAX,SAACA,GAAc,IAAD,EAEZtB,mBAAS,CAE/B4B,KAAK,GACLO,SAAQ,IAL0B,mBAE/BC,EAF+B,KAExBC,EAFwB,KAuBtC,OAfAC,qBAAU,WAENjB,EAAQC,GACHiB,MAAK,SAAAC,GAEFC,YAAW,WACPJ,EAAS,CACLT,KAAMY,EACNL,SAAQ,MAEd,UAGX,CAACb,IAEGc,EDrBgBM,CAAapB,GAA5BM,EAF2B,EAE3BA,KAAKO,EAFsB,EAEtBA,QAEb,OACI,qCACI,6BAAKb,IAEJa,GAAW,mBAAGjB,UAAU,qCAAb,wBACZ,qBAAKA,UAAU,iBAAf,SACKU,EAAKE,KAAK,SAAAa,GAAK,OACZ,cAAC,EAAD,eAEQA,GADCA,EAAM5B,aEgBpB6B,EA5BM,WAAK,IAAD,EAEe5C,mBAAS,CAAC,KAFzB,mBAEd6C,EAFc,KAEF9C,EAFE,KAQrB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAOC8C,EAAWf,KAAK,SAAAR,GAAQ,OACrB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,U,MCjB9BwB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e78de4d3.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setinputValue] = useState('');\n\n    const handleInputChange= (e)=>{\n        setinputValue(e.target.value);\n    }\n\n    const handleSubmit= (e)=>{\n        e.preventDefault();\n\n        if(inputValue.trim().length >2){\n            setCategories(catgs=>[inputValue, ...catgs]);\n            setinputValue('');\n        }\n    }\n\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type='text' \n                placeholder='Buscar'\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes={\n    setCategories: PropTypes.func.isRequired\n}","import React from 'react'\n\nexport const GifItem = ({id,title,imageUrl}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={imageUrl} alt={title}></img>\n            <p>{title}</p>\n        </div>\n        \n    )\n}\n","\nexport const GetGifs=  async (category)=>{\n    //encodeURI elimina los espacios\n    const url= `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=rqB2Fowc1ya7OKMBMcnZcGdyxhPSs9AI`\n    const resp= await fetch(url);\n    const {data} = await resp.json();\n\n    const imagesGif= data.map(img=>{\n        return{\n            id: img.id,\n            title: img.title,\n            imageUrl: img.images.downsized_medium.url\n        }\n        \n    })\n    \n    return imagesGif\n}","import React from 'react'\nimport { GifItem } from './GifItem'\nimport { useFetchGifs } from './hooks/useFetchGifs'\n\nexport const GifGrid = ({category}) => {\n\n    const { data,loading}= useFetchGifs(category);\n\n    return (\n        <>\n            <h3>{category}</h3>\n\n            {loading && <p className=\"animate__animated animate__flipInX\">Loading...</p>}\n            <div className=\"container-card\">\n                {data.map( image=> (\n                    <GifItem \n                        key={image.id}\n                        {...image}/>\n                ))}\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { GetGifs } from \"../helpers/GetGifs\";\n\n\nexport const useFetchGifs = (category) => {\n    \n    const [state, setstate] = useState({\n\n        data:[],\n        loading:true\n    });\n\n    useEffect(()=>{\n        \n        GetGifs(category)\n            .then(imgs=>{\n\n                setTimeout(()=>{\n                    setstate({\n                        data: imgs,\n                        loading:false\n                    })\n                },2000)\n                \n            })\n    }, [category])\n\n    return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = ()=>{\n\n    const [categories, setCategories] = useState(['']);\n\n    // const handleAddCategory= ()=>{\n    //     setCategories(['Samurai X', ...categories]);\n    // }\n\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n\n            {/* <button onClick={handleAddCategory}>\n                \n                Agregar\n            </button> */}\n\n            {categories.map( category =>\n                <GifGrid key={category} category={category} />\n            )\n            }\n\n        </>\n    )\n}\n\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}